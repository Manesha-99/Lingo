// <auto-generated />
using System;
using Lingo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lingo.Migrations
{
    [DbContext(typeof(LingoDbContext))]
    [Migration("20250226083644_Seeding Data")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lingo.Model.Domain.Continent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c97203c-30af-48e7-993a-29a316fab220"),
                            CodeName = "ASA",
                            Name = "Asia"
                        },
                        new
                        {
                            Id = new Guid("a5f9d466-b3ac-4e80-9c6a-2730626dce25"),
                            CodeName = "AFA",
                            Name = "Africa"
                        },
                        new
                        {
                            Id = new Guid("35aa616e-9d5a-411c-bb33-04a7ec0b2281"),
                            CodeName = "NAR",
                            Name = "North America"
                        },
                        new
                        {
                            Id = new Guid("d646b273-fcd4-4d5f-8269-5d2a0638dcd2"),
                            CodeName = "SAR",
                            Name = "South America"
                        },
                        new
                        {
                            Id = new Guid("6c3fe7a0-5b12-4a5e-9435-b6d96edfffe4"),
                            CodeName = "ATA",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = new Guid("c8841377-d6a4-477e-8102-08fc0edc7cec"),
                            CodeName = "EUO",
                            Name = "Europe"
                        },
                        new
                        {
                            Id = new Guid("caab9054-dc6d-451d-a7ff-64704cf2b8cb"),
                            CodeName = "AUS",
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("Lingo.Model.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("363bf2ce-a988-4b0a-88e5-12034f6c6aa5"),
                            CodeName = "USA",
                            Name = "United States America"
                        },
                        new
                        {
                            Id = new Guid("947664b6-25a2-42ad-b920-b427391b97b6"),
                            CodeName = "UK",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("9811952c-744c-4bae-91b3-14b4a4d2ee3e"),
                            CodeName = "ITA",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("9ed2d84b-bd42-4d20-965e-01e147f8c3c0"),
                            CodeName = "SA",
                            Name = "SouthAfrica"
                        },
                        new
                        {
                            Id = new Guid("8f348057-b5f9-4f47-85b2-8ce65a91b7bb"),
                            CodeName = "CHN",
                            Name = "China"
                        });
                });

            modelBuilder.Entity("Lingo.Model.Domain.Slang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContinentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StrongLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StrongLevelId");

                    b.ToTable("Slangs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c620e736-31e4-415d-aff4-945c77209f65"),
                            ContinentId = new Guid("35aa616e-9d5a-411c-bb33-04a7ec0b2281"),
                            CountryId = new Guid("363bf2ce-a988-4b0a-88e5-12034f6c6aa5"),
                            Meaning = "Exciting, amazing, or excellent",
                            StrongLevelId = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Word = "Lit"
                        },
                        new
                        {
                            Id = new Guid("5a3c1374-9f3c-4a96-a555-566403c28973"),
                            ContinentId = new Guid("35aa616e-9d5a-411c-bb33-04a7ec0b2281"),
                            CountryId = new Guid("363bf2ce-a988-4b0a-88e5-12034f6c6aa5"),
                            Meaning = "Means a lie",
                            StrongLevelId = new Guid("1c8b6236-74f1-40ac-a127-a0f8b572432b"),
                            Word = "Cap"
                        },
                        new
                        {
                            Id = new Guid("0854b55b-dfc4-4b44-9efc-32a9d883b88a"),
                            ContinentId = new Guid("c8841377-d6a4-477e-8102-08fc0edc7cec"),
                            CountryId = new Guid("947664b6-25a2-42ad-b920-b427391b97b6"),
                            Meaning = "Extremely tired or exhausted",
                            StrongLevelId = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Word = "Knackered"
                        },
                        new
                        {
                            Id = new Guid("2f66ce89-bb29-49da-92de-e645dfcb8fab"),
                            ContinentId = new Guid("35aa616e-9d5a-411c-bb33-04a7ec0b2281"),
                            CountryId = new Guid("363bf2ce-a988-4b0a-88e5-12034f6c6aa5"),
                            Meaning = "A gay man",
                            StrongLevelId = new Guid("d44ed0a3-72f8-4e8c-810b-3dbb270366d5"),
                            Word = "Faggot"
                        },
                        new
                        {
                            Id = new Guid("84e55f54-2214-4145-8cf3-ee28943fc189"),
                            ContinentId = new Guid("5c97203c-30af-48e7-993a-29a316fab220"),
                            CountryId = new Guid("8f348057-b5f9-4f47-85b2-8ce65a91b7bb"),
                            Meaning = "An Ugly Boy",
                            StrongLevelId = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Word = "làiháma"
                        },
                        new
                        {
                            Id = new Guid("a6b4703b-4a0e-4a7b-9ffd-9bdca7a9338b"),
                            ContinentId = new Guid("a5f9d466-b3ac-4e80-9c6a-2730626dce25"),
                            CountryId = new Guid("9ed2d84b-bd42-4d20-965e-01e147f8c3c0"),
                            Meaning = "the washing of your face and teeth only, instead of your whole body ",
                            StrongLevelId = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Word = "ID photo"
                        },
                        new
                        {
                            Id = new Guid("329eb9d0-147b-4467-b680-b8e52e9a2d76"),
                            ContinentId = new Guid("c8841377-d6a4-477e-8102-08fc0edc7cec"),
                            CountryId = new Guid("9811952c-744c-4bae-91b3-14b4a4d2ee3e"),
                            Meaning = "Means that's good or thank God",
                            StrongLevelId = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Word = "Meno male"
                        });
                });

            modelBuilder.Entity("Lingo.Model.Domain.StrongLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StrongLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cbe9559-f6d8-4e69-9ad7-16ca9560bd17"),
                            Level = "Mild/Casual Slang"
                        },
                        new
                        {
                            Id = new Guid("1c8b6236-74f1-40ac-a127-a0f8b572432b"),
                            Level = "Moderate Slang"
                        },
                        new
                        {
                            Id = new Guid("d44ed0a3-72f8-4e8c-810b-3dbb270366d5"),
                            Level = "Strong/Potentially Offensive Slang"
                        });
                });

            modelBuilder.Entity("Lingo.Model.Domain.Slang", b =>
                {
                    b.HasOne("Lingo.Model.Domain.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lingo.Model.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lingo.Model.Domain.StrongLevel", "StrongLevel")
                        .WithMany()
                        .HasForeignKey("StrongLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Continent");

                    b.Navigation("Country");

                    b.Navigation("StrongLevel");
                });
#pragma warning restore 612, 618
        }
    }
}
